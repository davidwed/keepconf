{\rtf1\ansi\ansicpg1252\deff0\deflang3082{\fonttbl{\f0\fswiss\fcharset0 Arial;}}
{\colortbl ;\red0\green0\blue255;\red128\green128\blue128;}
{\*\generator Msftedit 5.41.15.1515;}\viewkind4\uc1\pard\b\f0\fs20 Main goal.\par
\pard\ri-1726\b0\par
1) Keep persistent variable and object values beween executions, whith a few lines of code, may let to the templates do all the job.\par
2) Also store and restore whole variable object trees whith almost no impact on existing code.\par
3) Use known formats, actually json and xml, but easily extendible.\par
4) Allow incomplete (or partially lost) config files.\par
5) Know about the strengths and weakenness of the c++ standard, an figure out whi we had java, and not interpreted c++.\par
\par
\b 1, A tiny example.\b0\par
\par
This tiny piece of code (01-counter.cc) shows how using templates and overload, in c++ whe can achieve above goals with an include and one extra line of code.\par
\par
\cf1 #include "keepconf.h"      /// 1\'c2\'ba) Include the required templates\par
\par
int counter;\par
\par
//KEEPJSN( counter );         /// 2\'c2\'ba) This does the job ( json version )\par
KEEPXML( counter );         /// 2\'c2\'ba) This does the job ( xml version )\par
\par
int main( int argc, char ** argv )\par
\{ printf( "%s has been executed %d times"\par
        , *argv, counter );\par
\par
  counter++;         // Increase executions\par
\par
  return( counter );\par
\}\par
\cf0\par
\par
On first execution we get the file counter.jsn\par
\par
\i\{ "counter":  2 \par
\}\par
\i0\par
On the xml version counter.xml\par
\par
\i <?xml version="1.0" ?>\par
<config style="rich">\par
<counter int="1"/>\par
\i0\par
It's some weird, because it looks like more a variable declaration than code "per se" but it does the job in a "low entropy" way.\par
This article expands.\par
\par
As you can notice, the xml version has type information. This will be important on advances examples.\par
\par
\b 2, bunch of variables.\par
\b0\par
This second example ( 02-bunch.cc ) , only sligly more complex allows several variables to share the same config file:\par
\par
\i\{ "correse":\par
  \{ "counter":  5 \par
  , "message": "hello"\par
  , "flag":  123 \par
  \}\par
\}\par
\par
\i0  Or the xml version:\par
\i\par
<?xml version="1.0" ?>\par
<config style="rich">\par
<bunch class="TYPEbunch">\par
  <counter int="1"/>\par
  <message str="hello"/>\par
  <flag byte="123"/>\par
</bunch>\par
\par
\i0 You can delete a variable on both json or xml files, Next time you run the program, deleted lines will be recreated with the default values, so we have partial defaults capability.\par
\par
\b 3, loading and building an object from disk.\par
\b0\par
Nowadays, this article didn't help too much if creating objects will not be possible. This third example shows how templates and overload can achieve this. Simply by declarating  and filling in \cf1 void buildObject( <type> &  )\cf0  we will have an object constructor executed AFTER values have been loaded from disk.\par
\par
\par
\cf1 void buildObject( PersintentExample & obj )\par
\{ obj.doesNotMatter= 5;\par
  fprintf( stderr\par
         , "#\\n"\par
           "# %s has been built\\n"\par
           "#\\n\\n"\par
         , typeId( obj ));\par
\}\par
\par
\cf0 First time you execute the example, it creates the config file, but when it founds the config file, the given code is executed to build the example.\par
This is the json version of config file generated:\par
\par
\i\{ "objectExample":\par
  \{ "aInteger":  -3 \par
  , "aByte":  1 \par
  , "ourString": "Hello"\par
  , "anyType":  16384 \par
  , "uninitialized":  2 \par
  \}\par
\}\par
\par
\i0\par
s\par
\par
You don\'b4t need to save all the members on the object, but only needed. There is also no problem in adding or deleting members of the "save list"\par
\par
te art\'edculo no seria pr\'e1ctico si no fuese posible almacenar estructuras u objetos, por lo que el tercer ejemplo muestra la forma de hacer esto. Basicamente, consiste en agrupar las variables dentro del objeto que van a ser persistidas. Eso es todo. la librer\'eda de plantillas se encargar\'e1 de todo lo demas. Una acci\'f3n interesante posible es la funci\'f3n "buildObject" que permite manipular el objeto una vez cargado del disco. Esto es a veces imprescindible.\par
\par
\par
\b 4, creating an object from disk.\par
\b0\par
A further step. Many times, we need create with new and/or load objects from disk. This example shows how to do this. It is pretty self explanatory. Above mentioned is valid also for this example.\par
\par
\par
El caso mas complejo es cuando hay una lista en la que los objetos no son iguales. Esto tiene mucho sentido en la vida real. El ejemplo 5 muestra el interface, que como se ve, es bastante simple.\par
\par
\par
\b 5, Loading an array:\b0\par
\b\par
\par
7, A tree of arbitrary objects:\par
\par
\b0  This is, by far, the more advanced example.\par
It allows to have a tree of arbitrary objects stored on disk.\par
The way to add this capability over existing objects,  is tell how to reach the first and the next object in the list, the saver uses this to walk the tree.\par
\par
\cf1   friend type * type::nextObject(  type * hld ) \{ \cf2 return( hld->next ); \cf1\}\par
  friend type * type::firstObject(  type * hld ) \{ \cf2 return( hld       ); \cf1\}\par
\par
\cf0 And how to add a recently loaded object to the list (used when loding from disk)\par
\par
\cf1   void type::linkObject( type * hld )\par
  \{ \cf2 hld->next= next; next= hld;\par
\cf1   \}\par
\cf0\par
Althought this code relies only on templates, and no virtualization is used, the runtime must know about the loaded object, in this case of arbitrary list, so the implied objects must be virtual. Declaring linkObject virtual may be enough fot this, but is not neccesary in case of yet virtual objects.\par
\par
 Originally created and tested this code on the template version of good friend TUI. Here you are a screnshoot. The very polimorphic items on screen are stored this way in the template port. This made possible the deletion of thousands of lines of code on the original code.\par
\par
  Jason is much simpler than XML. It Know about variable names, but not about type names and array indexes. This leaves you out of combat this example, at least in the form of the basic specification.\par
\par
\b C++ language limitations:\b0\par
\par
 This is getting serious.\par
C++ sintax is wide. In fact it adds some several features over C. Only one of them could be taken as a new lenguage on its own:\par
\par
1) Function overload.\par
2) Code taken as part of structs (objects).\par
3) Code generators based on templates.\par
4) Inheritance, this can be simulated in "C", but in a unnatural way.\par
5) Code automatically launched on creation and disposal of data.\par
\par
This can lead us to the false conclusions that If I can't do something in C++ is my fault, or my lack of knowledge. There is severe proof that validate the problem lays on the c++ implementation: \par
\par
*) Every little time a new specification comes out, that is to say an altered interface:\par
You change something when it is incomplete. I would not change anything about his physique to Julia Roberts. To my language either, especially its hundreds (literally) of diferent ways to insult. \par
*)The readability of a project is lost as templates are used and refined. I understand that this is difficult to avoid.\par
*) #define is still needed, I challenge to rewrite this library without using them. This indicates an incompleteness of the interface, since #define is not typed at all.\par
*) There is no standard possibility to go through the list of virtual objects on runtime (perfectly known by libstdc++ ), to choose one of them and create it with a new. gcc is quite permissive with this, and that is the reason that example 5 is possible in gcc.\par
\par
\b Interface and implementation. Sorry? \par
\par
\b0  When I started programming, I thougth a good implementation of an algorithm was superb, the important thing. Lest write a body function 1000 times faster, a poor implementation can be fixed later.\par
I was totally wrong. One of the main problems in the created software is the nigthmare of the versions. Yo can improve a poor implementation anytime, without side effects, but a change in an interface means your old code stops building.\par
This code is about implementation. You know perfectly what to do and tells to compiler in a simple way. This means your code can be used by a wide audience. Think about stl, now part of c++. As a tiny example, lack of ".h" on include files was a consequence of an implementation change.\par
\par
\b The explosion of java:\par
\par
\b0 Now I would like to reflect on the previous points, because that is where I think this is the reason for the success of java, and is the heart of the operation of this library.\par
Compilers traditionally translate from human language to numbers. This makes all references to variable names and their manipulation disappear at compile time. The problem is that object name manipulation at runtime is something that over time has been essential, in fact we should not take a look at the blog with the programmers begging for a "const char * nameof ()" or similar. This means that a bridge between human language and the program is needed. All this in java is quite natural, but in c ++ there has been traditional resistance to building this bridge.\par
  There is a dark function called typeid ( later rebranded as __ctype ) and nameof  that acts as a bridge for variable types, but not in its original specification. This was precious time wasted. Here the turtle (java) overtake the hare (c++). \par
Another important feature is the lack of makefiles or build systems. I think all the neccesary to build a piece of code (dependences, libraries, compiler switchs etc) musty lay on source files. Build systems are so abused that had become a source of entropy.\par
\par
\b The future:\par
\b0\par
A way to have C++ used widely on the web, and millions of high quality of code reused for this, can be complete C++ interface with learned from Java. Once "#define" has dissapeared from non trivial code ( and makefiles also ), we will know the job is done.\par
\par
\b   \par
\b0\par
\par
\par
\par
\par
\par
\par
\par
 \par
\par
\par
\par
\par
\par
}
 